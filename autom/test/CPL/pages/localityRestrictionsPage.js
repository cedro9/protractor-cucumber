"use strict";

const tabGeneral = "[name='general']",
    allowedUntiedPacks = "[name='allowedUntiedPacks']",
    allowedToEmbed = "[name='allowedToEmbed']",
    allowedToBeEmbedded = "[name='allowedToBeEmbedded']",
    allowedOrderSplit = "[name='allowedOrderSplit']",
    allocateDockForTripFob = "[name='allocateDockForTripFob']",
    compatibilityRestrictions = "[name='entity.enabledCompatibilityRestrictions']",
    filterCompatibilityBySourceId = "[name='localityRestrictionsFilter.sourceId']",
    filterCompatibilityByName = "[name='localityRestrictionsFilter.name']",
    searchButton = "[name='searchIncompatibleLocalityRestrictions']",
    clearButton = "[name='clearIncompatibleLocalityRestrictions']",
    tabLogisticRestrictions = "[name='LocalityRestrictionLogistics']",
    localityRestriction = "[name='incompatibleLocalityRestrictions']",
    minimumVolume = "[name='LocalityRestrictionLogistics.logistConstrs.minVolume']",
    maximumVolume = "[name='LocalityRestrictionLogistics.logistConstrs.maxVolume']",
    minimumWeght = "[name='LocalityRestrictionLogistics.logistConstrs.minWeight']",
    maximumWeight = "[name='LocalityRestrictionLogistics.logistConstrs.maxWeight']",
    wrapperCategory = "[name='entity.localityRestrictionLogistics.quantityByWrapperCategory.shipmentUnitWrapperCategories']",
    minimumQuantityByWrapperCategory = "[name='localityRestrictionLogistics.quantityByWrapperCategory.min']",
    maximumQuantityByWrapperCategory = "[name='localityRestrictionLogistics.quantityByWrapperCategory.max']",
    tabWorkingHours = "[name='functioning']",
    loadUnloadTimeCalculatorScript = "[name='entity.loadUnloadTimeCalculatorScript']",
    useSpecificCalculator = "[name='entity.localityRestrictionLogistics.useSpecificServiceCostCalculator']",
    tabCosts = "[name='costs']",
    costCalculatorScript = "[name='entity.localityRestrictionLogistics.serviceCostCalculatorScript']",
    minimumLoadingCost = "[name='loadCostParams'] [name='model.minCost']",
    maximumLoadingCost = "[name='loadCostParams'] [name='model.maxCost']",
    loadingWrapperCategory = "[name='loadCostParams'] [name='model.costByWrapperCategory.shipmentUnitWrapperCategories']",
    loadingMeasurementUnitByWrapperCategory = "[name='loadCostParams'] [name='model.costByWrapperCategory.physicalQuantity']",
    loadingVariableByWrapperCategory = "[name='loadCostParams'] [name='model.costByWrapperCategory.cost']",
    fixedLoadingCost = "[name='loadCostParams'] [name='model.independentCost']",
    minimumUnloadingCost = "[name='unloadCostParams'] [name='model.minCost']",
    maximumUnloadingCost = "[name='unloadCostParams'] [name='model.maxCost']",
    fixedUnloadingCost = "[name='unloadCostParams'] [name='model.independentCost']",
    unloadingWrapperCategory = "[name='unloadCostParams'] [name='model.costByWrapperCategory.shipmentUnitWrapperCategories']",
    unloadingMeasurementUnitByWrapperCategory = "[name='unloadCostParams'] [name='model.costByWrapperCategory.physicalQuantity']",
    unloadingVariableByWrapperCategory = "[name='unloadCostParams'] [name='model.costByWrapperCategory.cost']",
    tabMonitoring = "[name='monitoring']",
    tabProductCategoryRestriction = "[name='productCategoryRestriction']",
    tabWrapperCategoryRestriction = "[name='localityRestrictionWrapperCategory']",
    tabVehicleRestrictions = "[name='localityRestrictionVehicle']",
    tabHubsRestrictions = "[name='localityRestrictionHub']",
    tabLoadUnloadRestriction = "[name='localityRestrictionLoadUnload']",
    tabProductCategoryPerVehicleRestriction = "[name='localityRestrictionVehicleProductCategory']";

const utils = require('../scripts/utils'),
    fillCombo = utils.fillCombo,
    elementClick = utils.elementClick,
    fillText = utils.fillText,
    present = require("../scripts/wait").present,
    dblClick = require("../scripts/events").dblClick,
    fillBasicInfo = require("../scripts/fillBasicEntity").fillBasicEntityInfo,
    scroll = require("../scripts/scroll"),
    taginput = require("../scripts/taginput"),
    filter = require("../scripts/filter"),
    validaMensagem = require("../scripts/messages").validaMensagem;

const { moveLeftToRigth, moveRigthToLeft } = require('../scripts/transferPanel');